"""
Overview
--------

This module provides an interface to data stored in the XMDF output files
generated by CMS-Wave and CMS-Flow.  The XMDF data format is built upon HDF5 and
is readable using HDF tools.

**Development Status:**
  **Last Modified:** October 18, 2010 by Charlie Sharpsteen

"""


#------------------------------------------------------------------------------
#  Imports from Python 2.7 standard library
#------------------------------------------------------------------------------
from datetime import datetime
import re

#------------------------------------------------------------------------------
#  Imports from third party libraries
#------------------------------------------------------------------------------
import h5py
import numpy

#------------------------------------------------------------------------------
#  Imports from other CMS submodules
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
#  Data Retrieval
#------------------------------------------------------------------------------
def load_cms_data(cmcardsPath):
  cms_props = scan_cmcards(cmcardsPath)

  return cms_props


def scan_cmcards(cmcardsPath):
  cmcards = open(cmcardsPath, 'r')

  cmcards_data = cmcards.read().splitlines()
  cmcards.close()

  # Pull out the date components from cmcards.
  dateComponents = [ 
    id_component( line )
    for line in cmcards_data 
    if re.search('JDATE', line) and not line.startswith('!') ]

  # There should only be two components.
  if len(dateComponents) != 2:
    raise RuntimeError('''Did not find exactly 2 JDATE cards in the cmcards
    file.  This violates assumptions made by scan_cmcards()!  Cowardly refusing
    to continue execution.''')

  # Sneaky trick to merge the two dictionaries contained in the dateComponents list.
  dateComponents = dict( dateComponents[0], **dateComponents[1] )

  # Collapse to a string.
  datestamp = '{date} {hour}'.format(**dateComponents)

  # Transform to an actual datestamp.
  datestamp = datetime.strptime( datestamp, '%y%j %H' )

  return datestamp


#---------------------------------------------------------------------
#  Utility Functions
#---------------------------------------------------------------------
def id_component( dateComponent ):
  # Should be a tag and a value
  dateComponent = re.split('\W+', dateComponent)[0:2]

  if dateComponent[0].endswith('HOUR'):
    return {'hour': dateComponent[1]}
  else:
    return {'date': dateComponent[1]}

