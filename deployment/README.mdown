Automagic Deployment
====================

This directory contains resources that can be used to manage the deployment of
SERC wave modelling software.  Using the software contained in this directory
the provisioning of new development and production servers running the software
should be close to a "turnkey" operation.

The [Chef][chef] configuration management software is used to manage deployment
of software to the following environments:

- Debian-based servers, particularity Ubuntu 10.10
- Apple OS X (currently not implemented)

Additionally, support is provided for quickly creating and recreating virtual
servers running the modeling environment using [Vagrant][vagrant].  Machines
created by Vagrant run Ubuntu Server 10.10 (64 bit) and provide ideal testing
and development environments as they are both disposable and reproducible.


Development With Vagrant
------------------------

To get started with [Vagrant][vagrant], first download and install [Oracle
VirtualBox][vbox].  VirtualBox is used to run virtualized copies of the Ubuntu
server while Vagrant is used to create and manage those copies.

The first step is to create a new Vagrant box named `WaveLab` based on an Ubuntu
server.  The following command will accomplish this-- but it will take some time
as an Ubuntu disk image ~500 MB in size must be downloaded:

    vagrant box add WaveLab http://dl.dropbox.com/u/72178/dist/ubuntu64.box

Next, run the following command from the directory containing this README file:

    vagrant up

This will unpack the disk image, create a new virtual machine and run Chef
scripts to provision the new server with all the required software.  Once the
box is up and running, a ssh connection can be established using:

    vagrant ssh

Once again, the above command must be run from the directory containing this
README file.  If something went wrong during the provisioning of the server by
`vagrant up` a likely culprit was a network timeout---i.e. a download of some
required software got hung up and failed.  The easiest fix is to try re-running
the chef setup scripts on the virtual machine via:

    vagrant provision


Deployment With Chef
--------------------

*To be written...*


Implementation Details
----------------------

The following steps are executed by Chef:

  - Install toolchain for compiling and managing code:

    * build-essential 
    * gcc and gfortran compilers
    * cmake
    * GNU stow
    * git 

  - Install tools and libraries required run the forecasting system:

    * libatlas - Tuned implementation of BLAS and LAPACK
    * libfftw3-dev
    * libsuitesparse-dev
    * libhdf5-serial-dev
    * libproj-dev
    * libgdal1-dev
    * proj-bin
    * gdal-bin 

  - Install Postgresql and PostGIS

  - Install CMS model from pre-built binaries supplied by project maintainers.

  - Install Python 2.7 and the Pip package manager.  Pip is used to build and
    install the following python modules which are required by the forecasting
    system:

    * sphinx
    * flask
    * pyparsing
    * numpy
    * scipy - Patched source code supplied by the project maintainers to allow
      compiling against Python 2.7 until SciPy 0.9 is released.
    * h5py -  Patched source code supplied by the project maintainers until a
      a newer version is released.
    * pydap
    * psycopg2
    * sqlalchemy
    * geoalchemy
    * pyproj
    * ipython

  - Install NCAR NCL library and PyNIO interface.  Binaries are provided by
    the project maintainers and are a mirror of the official NCAR binaries in
    order to facilitate automatic deployment.  PyNIO binaries are modified
    slightly to correct some naming errors.

  - Create new system user and postgres user using the information in
    `deploy-config.json`.  This user will own files, data and processes related
    to the forecasting system.

  - Use forecast user to checkout the forecasting system.

  - Create a new PostGIS database and use forecasting system database schema to
    set up tables.  Grant database administration to the forecast user.


## TODO:

- Link wave repository if it was downloaded via other means, such as a tarball.
  Homebrew would be a good place to look for an example of this behavior.
- Allow plaintext password to be specified in deploy-config.json and automate
  conversion into a shadow hash.
- Set up dbconfig.json and cmsconfig.json
- Tune the Postgresql configuration.
- Add OS X support.  Possibly by grabbing the Chef recipe for Homebrew used by
  the [Smeagol][smeagol] project.


  [chef]: http://opscode.com/chef
  [vagrant]: http://vagrantup.com
  [vbox]: http://www.virtualbox.org
  [smeagol]: https://github.com/atmos/smeagol
